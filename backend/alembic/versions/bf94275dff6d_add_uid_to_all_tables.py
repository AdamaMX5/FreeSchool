"""Add UID to all tables

Revision ID: bf94275dff6d
Revises: a638c6fbb441
Create Date: 2025-10-17 12:23:42.161127

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.orm import Session
import random
import string

# revision identifiers, used by Alembic.
revision: str = 'bf94275dff6d'
down_revision: Union[str, None] = 'a638c6fbb441'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def generate_uid_for_table(table_name: str, prefix: str) -> None:
    """Generiert UIDs für alle existierenden Records einer Tabelle"""
    connection = op.get_bind()
    session = Session(bind=connection)

    # Holen aller existierenden IDs
    result = connection.execute(
        sa.text(f"SELECT id FROM {table_name} WHERE uid IS NULL")
    )
    records = result.fetchall()

    for record in records:
        record_id = record[0]
        # UID generieren
        characters = string.ascii_letters + string.digits
        current_length = 6

        while True:
            random_part = ''.join(random.choice(characters) for _ in range(current_length))
            candidate_uid = f"{prefix}_{random_part}"

            # Prüfen ob UID bereits existiert
            existing = connection.execute(
                sa.text(f"SELECT uid FROM {table_name} WHERE uid = :uid"),
                {"uid": candidate_uid}
            ).first()

            if not existing:
                # UID setzen
                connection.execute(
                    sa.text(f"UPDATE {table_name} SET uid = :uid WHERE id = :id"),
                    {"uid": candidate_uid, "id": record_id}
                )
                break

            current_length += 1


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('category', sa.Column('uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_category_uid'), 'category', ['uid'], unique=True)
    op.add_column('content', sa.Column('uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_content_uid'), 'content', ['uid'], unique=True)
    op.add_column('lesson', sa.Column('uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_lesson_uid'), 'lesson', ['uid'], unique=True)
    op.add_column('profile', sa.Column('uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_profile_uid'), 'profile', ['uid'], unique=True)
    op.add_column('role', sa.Column('uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_role_uid'), 'role', ['uid'], unique=True)
    op.add_column('teacher', sa.Column('uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_teacher_uid'), 'teacher', ['uid'], unique=True)
    op.add_column('users', sa.Column('uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_users_uid'), 'users', ['uid'], unique=True)
    # ### end Alembic commands ###

    print("Generating UIDs for existing records...")
    generate_uid_for_table('users', 'u')
    generate_uid_for_table('profile', 'pr')
    generate_uid_for_table('role', 'ro')
    generate_uid_for_table('category', 'ca')
    generate_uid_for_table('content', 'co')
    generate_uid_for_table('lesson', 'le')
    generate_uid_for_table('teacher', 't')
    print("UID generation completed!")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_uid'), table_name='users')
    op.drop_column('users', 'uid')
    op.drop_index(op.f('ix_teacher_uid'), table_name='teacher')
    op.drop_column('teacher', 'uid')
    op.drop_index(op.f('ix_role_uid'), table_name='role')
    op.drop_column('role', 'uid')
    op.drop_index(op.f('ix_profile_uid'), table_name='profile')
    op.drop_column('profile', 'uid')
    op.drop_index(op.f('ix_lesson_uid'), table_name='lesson')
    op.drop_column('lesson', 'uid')
    op.drop_index(op.f('ix_content_uid'), table_name='content')
    op.drop_column('content', 'uid')
    op.drop_index(op.f('ix_category_uid'), table_name='category')
    op.drop_column('category', 'uid')
    # ### end Alembic commands ###
