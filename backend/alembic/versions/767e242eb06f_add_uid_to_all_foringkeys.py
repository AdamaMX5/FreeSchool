"""Add UID to all ForingKeys

Revision ID: 767e242eb06f
Revises: bf94275dff6d
Create Date: 2025-10-17 18:15:04.892079

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '767e242eb06f'
down_revision: Union[str, None] = 'bf94275dff6d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('categorycategory', sa.Column('parent_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('categorycategory', sa.Column('child_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('content', sa.Column('lesson_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('content', sa.Column('teacher_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('lesson', sa.Column('category_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('profile', sa.Column('user_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('userlessonlink', sa.Column('user_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('userlessonlink', sa.Column('lesson_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('userrolelink', sa.Column('user_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('userrolelink', sa.Column('role_uid', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    # ### end Alembic commands ###

    # Daten aktualisieren: UID-Werte basierend auf ID-Beziehungen setzen
    connection = op.get_bind()

    print("Updating UID foreign key values from existing ID relationships...")

    # CategoryCategory
    connection.execute(sa.text("""
        UPDATE categorycategory 
        SET parent_uid = (SELECT uid FROM category WHERE id = categorycategory.parent_id),
            child_uid = (SELECT uid FROM category WHERE id = categorycategory.child_id)
    """))

    # Content (wo ein teacher vorhanden ist)
    connection.execute(sa.text("""
        UPDATE content 
        SET lesson_uid = (SELECT uid FROM lesson WHERE id = content.lesson_id),
            teacher_uid = (SELECT uid FROM teacher WHERE id = content.teacher_id)
        WHERE teacher_id IS NOT NULL
    """))

    # Content (nur lesson_uid f체r Eintr채ge ohne teacher)
    connection.execute(sa.text("""
        UPDATE content 
        SET lesson_uid = (SELECT uid FROM lesson WHERE id = content.lesson_id)
        WHERE teacher_id IS NULL
    """))

    # Lesson
    connection.execute(sa.text("""
        UPDATE lesson 
        SET category_uid = (SELECT uid FROM category WHERE id = lesson.category_id)
    """))

    # Profile
    connection.execute(sa.text("""
        UPDATE profile 
        SET user_uid = (SELECT uid FROM users WHERE id = profile.user_id)
    """))

    # UserLessonLink
    connection.execute(sa.text("""
        UPDATE userlessonlink 
        SET user_uid = (SELECT uid FROM users WHERE id = userlessonlink.user_id),
            lesson_uid = (SELECT uid FROM lesson WHERE id = userlessonlink.lesson_id)
    """))

    # UserRoleLink
    connection.execute(sa.text("""
        UPDATE userrolelink 
        SET user_uid = (SELECT uid FROM users WHERE id = userrolelink.user_id),
            role_uid = (SELECT uid FROM role WHERE id = userrolelink.role_id)
    """))

    print("UID foreign key values updated successfully!")

    # Jetzt Fremdschl체ssel-Constraints hinzuf체gen
    print("Adding foreign key constraints...")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('fk_categorycategory_parent_uid', 'categorycategory', 'category', ['parent_uid'], ['uid'])
    op.create_foreign_key('fk_categorycategory_child_uid', 'categorycategory', 'category', ['child_uid'], ['uid'])
    op.create_foreign_key('fk_content_teacher_uid', 'content', 'teacher', ['teacher_uid'], ['uid'])
    op.create_foreign_key('fk_content_lesson_uid', 'content', 'lesson', ['lesson_uid'], ['uid'])
    op.create_foreign_key('fk_lesson_category_uid', 'lesson', 'category', ['category_uid'], ['uid'])
    op.create_foreign_key('fk_profile_user_uid', 'profile', 'users', ['user_uid'], ['uid'])
    op.create_foreign_key('fk_userlessonlink_user_uid', 'userlessonlink', 'users', ['user_uid'], ['uid'])
    op.create_foreign_key('fk_userlessonlink_lesson_uid', 'userlessonlink', 'lesson', ['lesson_uid'], ['uid'])
    op.create_foreign_key('fk_userrolelink_user_uid', 'userrolelink', 'users', ['user_uid'], ['uid'])
    op.create_foreign_key('fk_userrolelink_role_uid', 'userrolelink', 'role', ['role_uid'], ['uid'])
    # ### end Alembic commands ###

    print("Foreign key constraints added successfully!")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'userrolelink', type_='foreignkey')
    op.drop_constraint(None, 'userrolelink', type_='foreignkey')
    op.drop_column('userrolelink', 'role_uid')
    op.drop_column('userrolelink', 'user_uid')
    op.drop_constraint(None, 'userlessonlink', type_='foreignkey')
    op.drop_constraint(None, 'userlessonlink', type_='foreignkey')
    op.drop_column('userlessonlink', 'lesson_uid')
    op.drop_column('userlessonlink', 'user_uid')
    op.drop_constraint(None, 'profile', type_='foreignkey')
    op.drop_column('profile', 'user_uid')
    op.drop_constraint(None, 'lesson', type_='foreignkey')
    op.drop_column('lesson', 'category_uid')
    op.drop_constraint(None, 'content', type_='foreignkey')
    op.drop_constraint(None, 'content', type_='foreignkey')
    op.drop_column('content', 'teacher_uid')
    op.drop_column('content', 'lesson_uid')
    op.drop_constraint(None, 'categorycategory', type_='foreignkey')
    op.drop_constraint(None, 'categorycategory', type_='foreignkey')
    op.drop_column('categorycategory', 'child_uid')
    op.drop_column('categorycategory', 'parent_uid')
    # ### end Alembic commands ###
